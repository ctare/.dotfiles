[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'kassio/neoterm'

[[plugins]]
repo = 'jonathanfilip/vim-lucius'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    nnoremap <silent>D :Denite -mode=normal file_rec<CR>
    nnoremap <silent>B :Denite buffer -mode=normal<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
hook_add = 'let g:deoplete#enable_at_startup = 1'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    nnoremap <silent>q :ccl<CR>
    let g:quickrun_config = get(g:, 'quickrun_config', {})

    if filereadable('in')
        nnoremap <silent> , :ccl<CR> :QuickRun<in -mode n<CR>
    else
        nnoremap <silent> , :ccl<CR> :QuickRun -mode n<CR>
    endif

    let g:quickrun_config._ = {
    \   'outputter' : 'error',
    \   'outputter/error/success' : 'quickfix',
    \   'outputter/error/error'   : 'quickfix',
    \   'outputter/buffer/split'  : ':rightbelow 8sp',
    \ }
    let g:quickrun_config.cpp = {
    \   'command':'clang++',
    \   'cmdopt':'-std=c++11 -I/opt/boost/gcc/include -L/opt/boost/gcc/lib'
    \}
    let g:quickrun_config.cs = {
    \   'command':'mcs',
    \}
'''

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
    autocmd! BufWritePost * Neomake
    let g:neomake_error_sign = {'text': '>>', 'texthl':'Error'}
    let g:neomake_warning_sign = {'text': '>>', 'texthl': 'Todo'}
    let g:neomake_cpp_enable_markers=['clang']
'''
